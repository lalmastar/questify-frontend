{"ast":null,"code":"import { createAsyncThunk } from '@reduxjs/toolkit';\nimport { pageQueries, singleQuery, searchQuery } from \"../../config/routes.config\";\nexport const pageQuery = createAsyncThunk(\"queries/pageQuery\", async (data, thunkAPI) => {\n  try {\n    const response = await pageQueries(data);\n    return thunkAPI.fulfillWithValue(response);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const query = createAsyncThunk(\"queries/single_query\", async (data, thunkAPI) => {\n  try {\n    const response = await singleQuery(data);\n    return thunkAPI.fulfillWithValue(response);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});\nexport const search = createAsyncThunk(\"queries/search_query\", async (data, thunkAPI) => {\n  try {\n    const response = await searchQuery(data);\n    return thunkAPI.fulfillWithValue(response);\n  } catch (error) {\n    return thunkAPI.rejectWithValue(error.message);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","pageQueries","singleQuery","searchQuery","pageQuery","data","thunkAPI","response","fulfillWithValue","error","rejectWithValue","message","query","search"],"sources":["C:/Users/lalmastar/OneDrive/Desktop/Questify/questify-frontend/src/features/asyncThunks/queries.thunk.jsx"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nimport { pageQueries,singleQuery,searchQuery } from \"../../config/routes.config\"\r\n\r\nexport const pageQuery = createAsyncThunk(\r\n    \"queries/pageQuery\",\r\n    async (data,thunkAPI)=>{\r\n        try {\r\n            const response = await pageQueries(data);\r\n            return thunkAPI.fulfillWithValue(response)\r\n            \r\n          } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n          }\r\n    }\r\n)\r\n\r\nexport const query = createAsyncThunk(\r\n    \"queries/single_query\",\r\n    async (data,thunkAPI)=>{\r\n        try {\r\n            const response = await singleQuery(data);\r\n            return thunkAPI.fulfillWithValue(response)\r\n          } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n          }\r\n    }\r\n)\r\n\r\nexport const search = createAsyncThunk(\r\n    \"queries/search_query\",\r\n    async (data,thunkAPI)=>{\r\n        try {\r\n            const response = await searchQuery(data);\r\n            return thunkAPI.fulfillWithValue(response)\r\n          } catch (error) {\r\n            return thunkAPI.rejectWithValue(error.message);\r\n          }\r\n    }\r\n)"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AAEnD,SAASC,WAAW,EAACC,WAAW,EAACC,WAAW,QAAQ,4BAA4B;AAEhF,OAAO,MAAMC,SAAS,GAAGJ,gBAAgB,CACrC,mBAAmB,EACnB,OAAOK,IAAI,EAACC,QAAQ,KAAG;EACnB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMN,WAAW,CAACI,IAAI,CAAC;IACxC,OAAOC,QAAQ,CAACE,gBAAgB,CAACD,QAAQ,CAAC;EAE5C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACN,CAAC,CACJ;AAED,OAAO,MAAMC,KAAK,GAAGZ,gBAAgB,CACjC,sBAAsB,EACtB,OAAOK,IAAI,EAACC,QAAQ,KAAG;EACnB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAML,WAAW,CAACG,IAAI,CAAC;IACxC,OAAOC,QAAQ,CAACE,gBAAgB,CAACD,QAAQ,CAAC;EAC5C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACN,CAAC,CACJ;AAED,OAAO,MAAME,MAAM,GAAGb,gBAAgB,CAClC,sBAAsB,EACtB,OAAOK,IAAI,EAACC,QAAQ,KAAG;EACnB,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,WAAW,CAACE,IAAI,CAAC;IACxC,OAAOC,QAAQ,CAACE,gBAAgB,CAACD,QAAQ,CAAC;EAC5C,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd,OAAOH,QAAQ,CAACI,eAAe,CAACD,KAAK,CAACE,OAAO,CAAC;EAChD;AACN,CAAC,CACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}