{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { query, pageQuery, search } from \"../asyncThunks/queries.thunk\";\nconst queriesSlice = createSlice({\n  name: \"queries\",\n  initialState: {\n    isPageQueryLoading: false,\n    isSingleQueryLoading: false,\n    isSearchQueryLoading: false,\n    pageQueryError: null,\n    singleQueryError: null,\n    searchQueryError: null,\n    pageQuerydata: [],\n    singleQuerydata: [],\n    searchQueryData: []\n  },\n  reducers: {},\n  extraReducers: builder => {\n    //page query\n    builder.addCase(pageQuery.pending, state => {\n      state.isPageQueryLoading = true;\n    }).addCase(pageQuery.fulfilled, (state, action) => {\n      state.isPageQueryLoading = false;\n      state.pageQueryData = action.payload;\n    }).addCase(pageQuery.rejected, (state, action) => {\n      state.isPageQueryLoading = false;\n      state.pageQueryError = action.payload;\n    })\n    //single query\n    .addCase(query.pending, state => {\n      state.isSingleQueryLoading = true;\n    }).addCase(query.fulfilled, (state, action) => {\n      state.isSingleQueryLoading = false;\n      state.singleQueryData = action.payload;\n    }).addCase(query.rejected, (state, action) => {\n      state.isSingleQueryLoading = false;\n      state.singleQueryError = action.payload;\n    })\n    //search query\n    .addCase(search.pending, state => {\n      state.isSearchQueryLoading = true;\n    }).addCase(search.fulfilled, (state, action) => {\n      state.isSearchQueryLoading = false;\n      state.searchQueryData = action.payload;\n    }).addCase(search.rejected, (state, action) => {\n      state.isSearchQueryLoading = false;\n      state.searchQueryError = action.payload;\n    });\n  }\n});\nexport default queriesSlice.reducer;","map":{"version":3,"names":["createSlice","query","pageQuery","search","queriesSlice","name","initialState","isPageQueryLoading","isSingleQueryLoading","isSearchQueryLoading","pageQueryError","singleQueryError","searchQueryError","pageQuerydata","singleQuerydata","searchQueryData","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","pageQueryData","payload","rejected","singleQueryData","reducer"],"sources":["C:/Users/lalmastar/OneDrive/Desktop/Questify/questify-frontend/src/features/queries/queriesSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { query, pageQuery, search } from \"../asyncThunks/queries.thunk\";\r\n\r\nconst queriesSlice = createSlice({\r\n  name: \"queries\",\r\n  initialState: {\r\n    isPageQueryLoading: false,\r\n    isSingleQueryLoading: false,\r\n    isSearchQueryLoading: false,\r\n    pageQueryError: null,\r\n    singleQueryError: null,\r\n    searchQueryError: null,\r\n    pageQuerydata: [],\r\n    singleQuerydata: [],\r\n    searchQueryData: [],\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    //page query\r\n    builder\r\n      .addCase(pageQuery.pending, (state) => {\r\n        state.isPageQueryLoading = true;\r\n      })\r\n      .addCase(pageQuery.fulfilled, (state, action) => {\r\n        state.isPageQueryLoading = false;\r\n        state.pageQueryData = action.payload;\r\n      })\r\n      .addCase(pageQuery.rejected, (state, action) => {\r\n        state.isPageQueryLoading = false;\r\n        state.pageQueryError = action.payload;\r\n      })\r\n      //single query\r\n      .addCase(query.pending, (state) => {\r\n        state.isSingleQueryLoading = true;\r\n      })\r\n      .addCase(query.fulfilled, (state, action) => {\r\n        state.isSingleQueryLoading = false;\r\n        state.singleQueryData = action.payload;\r\n      })\r\n      .addCase(query.rejected, (state, action) => {\r\n        state.isSingleQueryLoading = false;\r\n        state.singleQueryError = action.payload;\r\n      })\r\n      //search query\r\n      .addCase(search.pending, (state) => {\r\n        state.isSearchQueryLoading = true;\r\n      })\r\n      .addCase(search.fulfilled, (state, action) => {\r\n        state.isSearchQueryLoading = false;\r\n        state.searchQueryData = action.payload;\r\n      })\r\n      .addCase(search.rejected, (state, action) => {\r\n        state.isSearchQueryLoading = false;\r\n        state.searchQueryError = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport default queriesSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,KAAK,EAAEC,SAAS,EAAEC,MAAM,QAAQ,8BAA8B;AAEvE,MAAMC,YAAY,GAAGJ,WAAW,CAAC;EAC/BK,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,kBAAkB,EAAE,KAAK;IACzBC,oBAAoB,EAAE,KAAK;IAC3BC,oBAAoB,EAAE,KAAK;IAC3BC,cAAc,EAAE,IAAI;IACpBC,gBAAgB,EAAE,IAAI;IACtBC,gBAAgB,EAAE,IAAI;IACtBC,aAAa,EAAE,EAAE;IACjBC,eAAe,EAAE,EAAE;IACnBC,eAAe,EAAE;EACnB,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1B;IACAA,OAAO,CACJC,OAAO,CAACjB,SAAS,CAACkB,OAAO,EAAGC,KAAK,IAAK;MACrCA,KAAK,CAACd,kBAAkB,GAAG,IAAI;IACjC,CAAC,CAAC,CACDY,OAAO,CAACjB,SAAS,CAACoB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACd,kBAAkB,GAAG,KAAK;MAChCc,KAAK,CAACG,aAAa,GAAGD,MAAM,CAACE,OAAO;IACtC,CAAC,CAAC,CACDN,OAAO,CAACjB,SAAS,CAACwB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACd,kBAAkB,GAAG,KAAK;MAChCc,KAAK,CAACX,cAAc,GAAGa,MAAM,CAACE,OAAO;IACvC,CAAC;IACD;IAAA,CACCN,OAAO,CAAClB,KAAK,CAACmB,OAAO,EAAGC,KAAK,IAAK;MACjCA,KAAK,CAACb,oBAAoB,GAAG,IAAI;IACnC,CAAC,CAAC,CACDW,OAAO,CAAClB,KAAK,CAACqB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACb,oBAAoB,GAAG,KAAK;MAClCa,KAAK,CAACM,eAAe,GAAGJ,MAAM,CAACE,OAAO;IACxC,CAAC,CAAC,CACDN,OAAO,CAAClB,KAAK,CAACyB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC1CF,KAAK,CAACb,oBAAoB,GAAG,KAAK;MAClCa,KAAK,CAACV,gBAAgB,GAAGY,MAAM,CAACE,OAAO;IACzC,CAAC;IACD;IAAA,CACCN,OAAO,CAAChB,MAAM,CAACiB,OAAO,EAAGC,KAAK,IAAK;MAClCA,KAAK,CAACZ,oBAAoB,GAAG,IAAI;IACnC,CAAC,CAAC,CACDU,OAAO,CAAChB,MAAM,CAACmB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC5CF,KAAK,CAACZ,oBAAoB,GAAG,KAAK;MAClCY,KAAK,CAACN,eAAe,GAAGQ,MAAM,CAACE,OAAO;IACxC,CAAC,CAAC,CACDN,OAAO,CAAChB,MAAM,CAACuB,QAAQ,EAAE,CAACL,KAAK,EAAEE,MAAM,KAAK;MAC3CF,KAAK,CAACZ,oBAAoB,GAAG,KAAK;MAClCY,KAAK,CAACT,gBAAgB,GAAGW,MAAM,CAACE,OAAO;IACzC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAerB,YAAY,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}