{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { allQuestions, my_Questions, add_Question, upvote_Question, downvote_Question, recommended_Questions } from \"../asyncThunks/questions.thunk\";\nexport const questionsSlice = createSlice({\n  name: \"questions\",\n  initialState: {\n    isAllQuestionsLoading: false,\n    allQuestionsData: [],\n    allQuestionsError: null,\n    isMyQuestionsLoading: false,\n    myQuestionsData: [],\n    myQuestionsError: null,\n    isAddQuestionLoading: false,\n    addQuestionData: {},\n    addQuestionError: null,\n    isUpvoteQuestionLoading: false,\n    upvoteQuestionData: {},\n    upvoteQuestionError: null,\n    isDownvoteQuestionLoading: false,\n    downvoteQuestionData: {},\n    downvoteQuestionError: null,\n    isRecommendedQuestionsLoading: false,\n    recommendedQuestionsData: [],\n    recommendedQuestionsError: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    //all questions\n    builder.addCase(allQuestions.pending, (state, action) => {\n      state.isAllQuestionsLoading = true;\n    }).addCase(allQuestions.fulfilled, (state, action) => {\n      state.allQuestionsData = action.payload;\n      state.isAllQuestionsLoading = false;\n    }).addCase(allQuestions.rejected, (state, action) => {\n      state.isAllQuestionsLoading = false;\n      state.allQuestionsData = action.payload;\n    })\n    //all questions\n    .addCase(my_Questions.pending, state => {\n      state.isMyQuestionsLoading = true;\n    }).addCase(my_Questions.fulfilled, (state, action) => {\n      state.myQuestionsData = action.payload;\n      state.isMyQuestionsLoading = false;\n    }).addCase(my_Questions.rejected, (state, action) => {\n      state.isMyQuestionsLoading = false;\n      state.myQuestionsError = action.payload;\n    }).addCase(add_Question.pending, (state, action) => {\n      state.isAddQuestionLoading = true;\n    }).addCase(add_Question.fulfilled, (state, action) => {\n      state.addQuestionData = action.payload;\n      state.isAddQuestionLoading = false;\n    }).addCase(add_Question.rejected, (state, action) => {\n      state.isAddQuestionLoading = false;\n      state.addQuestionError = action.payload;\n    }).addCase(upvote_Question.pending, (state, action) => {\n      state.isUpvoteQuestionLoading = true;\n    }).addCase(upvote_Question.fulfilled, (state, action) => {\n      state.upvoteQuestionData = action.payload;\n      state.isUpvoteQuestionLoading = false;\n    }).addCase(upvote_Question.rejected, (state, action) => {\n      state.isUpvoteQuestionLoading = false;\n      state.upvoteQuestionError = action.payload;\n    }).addCase(downvote_Question.pending, state => {\n      state.isDownvoteQuestionLoading = true;\n    }).addCase(downvote_Question.fulfilled, (state, action) => {\n      state.downvoteQuestionData = action.payload;\n      state.isDownvoteQuestionLoading = false;\n    }).addCase(downvote_Question.rejected, (state, action) => {\n      state.isDownvoteQuestionLoading = false;\n      state.downvoteQuestionError = action.payload;\n    }).addCase(recommended_Questions.pending, (state, action) => {\n      state.isRecommendedQuestionsLoading = true;\n    }).addCase(recommended_Questions.fulfilled, (state, action) => {\n      state.recommendedQuestionsData = action.payload;\n      state.isRecommendedQuestionsLoading = false;\n    }).addCase(recommended_Questions.rejected, (state, action) => {\n      state.isRecommendedQuestionsLoading = false;\n      state.recommendedQuestionsError = action.payload;\n    });\n  }\n});\nexport const all_questions = state => state.questions.allQuestionsData;\nexport default questionsSlice.reducer;","map":{"version":3,"names":["createSlice","allQuestions","my_Questions","add_Question","upvote_Question","downvote_Question","recommended_Questions","questionsSlice","name","initialState","isAllQuestionsLoading","allQuestionsData","allQuestionsError","isMyQuestionsLoading","myQuestionsData","myQuestionsError","isAddQuestionLoading","addQuestionData","addQuestionError","isUpvoteQuestionLoading","upvoteQuestionData","upvoteQuestionError","isDownvoteQuestionLoading","downvoteQuestionData","downvoteQuestionError","isRecommendedQuestionsLoading","recommendedQuestionsData","recommendedQuestionsError","reducers","extraReducers","builder","addCase","pending","state","action","fulfilled","payload","rejected","all_questions","questions","reducer"],"sources":["C:/Users/lalmastar/OneDrive/Desktop/Questify/questify-frontend/src/features/questions/questionsSlice.jsx"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport {\r\n  allQuestions,\r\n  my_Questions,\r\n  add_Question,\r\n  upvote_Question,\r\n  downvote_Question,\r\n  recommended_Questions,\r\n} from \"../asyncThunks/questions.thunk\";\r\n\r\nexport const questionsSlice = createSlice({\r\n  name: \"questions\",\r\n  initialState: {\r\n    isAllQuestionsLoading: false,\r\n    allQuestionsData: [],\r\n    allQuestionsError: null,\r\n    isMyQuestionsLoading: false,\r\n    myQuestionsData: [],\r\n    myQuestionsError: null,\r\n    isAddQuestionLoading: false,\r\n    addQuestionData: {},\r\n    addQuestionError: null,\r\n    isUpvoteQuestionLoading: false,\r\n    upvoteQuestionData: {},\r\n    upvoteQuestionError: null,\r\n    isDownvoteQuestionLoading: false,\r\n    downvoteQuestionData: {},\r\n    downvoteQuestionError: null,\r\n    isRecommendedQuestionsLoading: false,\r\n    recommendedQuestionsData: [],\r\n    recommendedQuestionsError: null,\r\n  },\r\n  reducers: {},\r\n  extraReducers: (builder) => {\r\n    //all questions\r\n    builder\r\n      .addCase(allQuestions.pending, (state, action) => {\r\n        state.isAllQuestionsLoading = true;\r\n      })\r\n      .addCase(allQuestions.fulfilled, (state, action) => {\r\n        state.allQuestionsData = action.payload;\r\n        state.isAllQuestionsLoading = false;\r\n      })\r\n      .addCase(allQuestions.rejected, (state, action) => {\r\n        state.isAllQuestionsLoading = false;\r\n        state.allQuestionsData = action.payload;\r\n      })\r\n      //all questions\r\n      .addCase(my_Questions.pending, (state) => {\r\n        state.isMyQuestionsLoading = true;\r\n      })\r\n      .addCase(my_Questions.fulfilled, (state, action) => {\r\n        state.myQuestionsData = action.payload;\r\n        state.isMyQuestionsLoading = false;\r\n      })\r\n      .addCase(my_Questions.rejected, (state, action) => {\r\n        state.isMyQuestionsLoading = false;\r\n        state.myQuestionsError = action.payload;\r\n      })\r\n      .addCase(add_Question.pending, (state, action) => {\r\n        state.isAddQuestionLoading=true;\r\n      })\r\n      .addCase(add_Question.fulfilled, (state, action) => {\r\n        state.addQuestionData = action.payload;\r\n        state.isAddQuestionLoading=false;\r\n      })\r\n      .addCase(add_Question.rejected, (state, action) => {\r\n        state.isAddQuestionLoading=false;\r\n        state.addQuestionError = action.payload;\r\n      })\r\n      .addCase(upvote_Question.pending, (state, action) => {\r\n        state.isUpvoteQuestionLoading=true;\r\n      })\r\n      .addCase(upvote_Question.fulfilled, (state, action) => {\r\n        state.upvoteQuestionData = action.payload;\r\n        state.isUpvoteQuestionLoading=false;\r\n      })\r\n      .addCase(upvote_Question.rejected, (state, action) => {\r\n        state.isUpvoteQuestionLoading=false;\r\n        state.upvoteQuestionError = action.payload;\r\n      })\r\n      .addCase(downvote_Question.pending, (state) => {\r\n        state.isDownvoteQuestionLoading=true;\r\n      })\r\n      .addCase(downvote_Question.fulfilled, (state, action) => {\r\n        state.downvoteQuestionData = action.payload;\r\n        state.isDownvoteQuestionLoading=false;\r\n      })\r\n      .addCase(downvote_Question.rejected, (state, action) => {\r\n        state.isDownvoteQuestionLoading=false;\r\n        state.downvoteQuestionError = action.payload;\r\n      })\r\n      .addCase(recommended_Questions.pending, (state, action) => {\r\n        state.isRecommendedQuestionsLoading=true;\r\n      })\r\n      .addCase(recommended_Questions.fulfilled, (state, action) => {\r\n        state.recommendedQuestionsData = action.payload;\r\n        state.isRecommendedQuestionsLoading=false;\r\n      })\r\n      .addCase(recommended_Questions.rejected, (state, action) => {\r\n        state.isRecommendedQuestionsLoading=false;\r\n        state.recommendedQuestionsError = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const all_questions = (state) => state.questions.allQuestionsData;\r\n\r\nexport default questionsSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}